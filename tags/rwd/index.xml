<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rwd on Ronan Levesque - Front-end &amp; Webdesign</title>
    <link>http://ronanlevesque.fr/tags/rwd/</link>
    <description>Recent content in Rwd on Ronan Levesque - Front-end &amp; Webdesign</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ronanlevesque.fr/tags/rwd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS « fonctionnel » et responsive design</title>
      <link>http://ronanlevesque.fr/articles/css-fonctionnel-et-responsive-design/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/css-fonctionnel-et-responsive-design/</guid>
      <description>J&amp;rsquo;ai lu aujourd&amp;rsquo;hui un article très intéressant qui soulignait les bénéfices du CSS dit « fonctionnel » (on entend par fonctionnel l&amp;rsquo;utilisation généralisée de classes utilitaires à but unique). Le hic, c&amp;rsquo;est qu&amp;rsquo;il néglige également de parler d&amp;rsquo;un inconvénient majeur et de la manière de le traiter.
Un exemple pour commencer&amp;hellip; Avant de rentrer dans le vif du sujet il peut être utile de faire un rappel de ce qu&amp;rsquo;est le CSS fonctionnel, cf.</description>
    </item>
    
    <item>
      <title>Responsive design : adoptez un process intelligent !</title>
      <link>http://ronanlevesque.fr/articles/responsive-design-adoptez-un-process-intelligent/</link>
      <pubDate>Thu, 13 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/responsive-design-adoptez-un-process-intelligent/</guid>
      <description>Ce n&amp;rsquo;est plus vraiment une nouveauté&amp;nbsp;: le responsive design est la tendance hype du moment. De plus en plus d&amp;rsquo;acteurs du web ont réalisé qu&amp;rsquo;il devenait incontournable dans un contexte où les supports numériques se multiplient de manière phénoménale. Mais pour que sa mise en place soit effective, il faut pouvoir adapter nos processes à ses exigences. Malheureusement ça n&amp;rsquo;est pas toujours le cas.
Les processes décrits ci-dessous interviennent entre la définition des besoins client et de la stratégie (contenu, architecture etc.</description>
    </item>
    
    <item>
      <title>Les anciens navigateurs</title>
      <link>http://ronanlevesque.fr/articles/les-anciens-navigateurs/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/les-anciens-navigateurs/</guid>
      <description>La vie serait beaucoup plus simple si on n&amp;rsquo;avait plus à assurer le support des antiquités que sont IE6, 7 et 8. Malheureusement au quotidien ça n&amp;rsquo;est pas toujours possible; on se retrouve souvent contraints de réaliser le grand écart entre moderne et vieux. Si l&amp;rsquo;on souhaite se tourner vers une conception moderne en responsive design, comment s&amp;rsquo;assurer du meilleur support possible&amp;nbsp;?
Cet article s&#39;attardera uniquement sur la gestion des media queries en responsive design; je ne parlerai pas ici d&#39;autres propriétés CSS3 non supportés par certains de ces navigateurs, par exemple flexbox, border-box etc.</description>
    </item>
    
    <item>
      <title>FOX CSS est passé sous Sass</title>
      <link>http://ronanlevesque.fr/articles/fox-css-est-passe-sous-sass/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/fox-css-est-passe-sous-sass/</guid>
      <description>J&amp;rsquo;ai lancé depuis quelques mois mon petit &amp;ldquo;framework&amp;rdquo; CSS perso, FOX CSS, et après l&amp;rsquo;avoir utilisé pour la création de sites allant de sites d&amp;rsquo;une page à des projets bien plus complexes, je le trouve parfaitement viable par rapport à mes besoins. En parallèle, j&amp;rsquo;ai aussi passé tous mes projets sous Sass; la suite logique était donc de mixer FOX CSS et Sass.
Ce que je considère comme le point fort de ce framework, c&amp;rsquo;est sa modularité.</description>
    </item>
    
    <item>
      <title>Un @mixin Sass simple pour les media queries</title>
      <link>http://ronanlevesque.fr/articles/un-mixin-sass-simple-pour-les-media-queries/</link>
      <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/un-mixin-sass-simple-pour-les-media-queries/</guid>
      <description>J&amp;rsquo;avais chanté les louanges du préprocesseur Sass il y a quelques mois, convaincu de l&amp;rsquo;intérêt de cet outil. Depuis je l&amp;rsquo;ai intégré en production sur quelques projets, et son intérêt ne se dément vraiment pas. Combiné à les logiciels simples (je vous conseille vivement Prepros sur Windows) c&amp;rsquo;est un bonheur à utiliser.
Les @mixins sont un vrai plus de Sass. Pour rappel ils permettent de réutiliser grâce à @include une partie de notre CSS, qu&amp;rsquo;on peut par exemple combiner avec des variables.</description>
    </item>
    
    <item>
      <title>Un template complexe pour le responsive design</title>
      <link>http://ronanlevesque.fr/articles/un-template-complexe-pour-le-responsive-design/</link>
      <pubDate>Mon, 24 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/un-template-complexe-pour-le-responsive-design/</guid>
      <description>J&amp;rsquo;ai intégré un template pour approche &amp;ldquo;mobile first&amp;rdquo; dans FOX CSS, le framework que j&amp;rsquo;ai créé (cf. mon article précédent). Par exemple, un élément de type bloc s&amp;rsquo;étant vu attribuer la classe .r50 occupera 100% de la largeur de son parent jusqu&amp;rsquo;à 640px de largeur, puis il passera à 50% au-dessus. C&amp;rsquo;est un bon début, mais comment faire si on veut plus de possibilités sur des résolutions supérieures&amp;nbsp;?
Ainsi, avec cette classe .</description>
    </item>
    
    <item>
      <title>FOX CSS : un framework CSS light</title>
      <link>http://ronanlevesque.fr/articles/fox-css-un-framework-css-light/</link>
      <pubDate>Fri, 14 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/fox-css-un-framework-css-light/</guid>
      <description>J&amp;rsquo;ai bossé ces dernières semaines sur la création d&amp;rsquo;un framework CSS adapté à mes besoins. L&amp;rsquo;idée m&amp;rsquo;est venue quand le framework KNACSS a été publié. Avant cela, j&amp;rsquo;utilisais un simple reset, celui d&amp;rsquo;Eric Meyer. Mais le fait de repartir à zéro, et de manière aussi extrême, n&amp;rsquo;était pas la solution la plus satisfaisante à mes yeux. A l&amp;rsquo;opposé, utiliser des frameworks complexes, comme Twitter Bootstrap, ne répondait pas non plus à mes besoins.</description>
    </item>
    
    <item>
      <title>A propos du responsive design</title>
      <link>http://ronanlevesque.fr/articles/a-propos-du-responsive-design/</link>
      <pubDate>Fri, 20 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://ronanlevesque.fr/articles/a-propos-du-responsive-design/</guid>
      <description>Ce site a été construit sur le principe du responsive design. Cela signifie en fait qu&amp;rsquo;il est construit de manière à s&amp;rsquo;adapter automatiquement à la résolution des différents écrans. A partir du moment où vous êtes équipés d&amp;rsquo;un navigateur moderne (c&amp;rsquo;est à dire à peu près tous les navigateurs à part Internet Explorer 8 et versions inférieures), il s&amp;rsquo;ajustera de lui-même à votre écran.
Pour tester cela il vous suffit simplement de redimensionner la fenêtre de votre navigateur pour voir si les éléments se repositionnent automatiquement d&amp;rsquo;eux-même afin de respecter la largeur de la fenêtre.</description>
    </item>
    
  </channel>
</rss>