// LAYOUT

// Those 2 mixins (bp and bpmax) are able to create a separate stylesheet for IE<9
// Based on http://jakearchibald.github.io/sass-ie/
// You need to create a new SCSS file for IE and add the following lines in it :
// $fix-mqs: 1200; // or whatever max-size you want to support...
// @import "fox";

$fix-mqs: false !default;

// Min-width media queries
@mixin bp($point) {
    @if $fix-mqs {
        @if $fix-mqs >= $point {
            @content;
        }
    }
    @else {
        @media screen and (min-width: $point / 16 + em) {
            @content;
        }
    }
}

// Max-width media queries
@mixin bpmax($point) {
    @if $fix-mqs {
        @if $fix-mqs >= $point {
            @content;
        }
    }
    @else {
        @media screen and (max-width: $point / 16 + em) {
            @content;
        }
    }
}

// Responsive blocks (two sizes)
@mixin rblock($size1, $breakpoint1) {
    @media screen and (min-width: $breakpoint1 / 16 + em) {
        display: inline-block;
        width: $size1*1%;
    }
}

// Responsive blocks (three sizes)
@mixin rblock2($size1, $size2, $breakpoint1, $breakpoint2) {
    @media screen and (min-width: $breakpoint1 / 16 + em) {
        display: inline-block;
        width: $size1*1%;
    }
    @media screen and (min-width: $breakpoint2 / 16 + em) {
        width: $size2*1%;
    }
}

// Flexbox mixins
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin flex($flexvalues) {
    -webkit-box-flex: $flexvalues;
    -moz-box-flex: $flexvalues;
    -webkit-flex: $flexvalues;
    -ms-flex: $flexvalues;
    flex: $flexvalues;
}

@mixin order($flexval) {
    -webkit-box-ordinal-group: $flexval;  
    -moz-box-ordinal-group: $flexval;     
    -ms-flex-order: $flexval;     
    -webkit-order: $flexval;  
    order: $flexval;
}

// FORMATTING

// Rem formatting with px fallback
// http://designbyjoel.com/blog/2013-02-28-sass-rems/
$def-px: 16;
@function fix8_unit_to_px($val) {
    @if $val == auto {
        @return $val;
    }
    @else {
        @if unitless($val) {
        @if $val == 0 { @return $val }
        @else { @return $val+px};
        } @else { @return $val};
    }
}

@function fix8_unit_to_rem($val) {
    @if $val == auto {
        @return $val;
    }
    @else {
        @if unitless($val) {
        @if $val == 0 { @return $val }
        @else { @return $val / $def-px+rem};
        } @else { @return $val};
    }
}

//Example (value in px)
// p {@include pxrem(padding, 10);}
@mixin pxrem($prop, $val...) {
    $n: length($val);
    $i: 1;

    $px-list: ();
    $rem-list: ();

    @while $i <= $n {
        $px-list: append($px-list, fix8_unit_to_px(nth($val, $i)));
        $rem-list: append($rem-list, fix8_unit_to_rem(nth($val, $i)));
        $i: $i + 1;
    }

    #{$prop}: $px-list;
    #{$prop}: $rem-list;
}

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); // IE8
}

// HD background images
@mixin image-2x($image, $width, $height) {
    @media (-moz-min-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        // on retina, use image that's scaled by 2
        background-image: url($image);
        background-size: $width $height;
    }
}

